@function parseInt( $number ) {
  @return $number / ( $number * 0 + 1 );
 }

@mixin clearfix() {
    &:after, &:before {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@function str-replace($string, $search, $replace: '') {
	$index: str-index( $string, $search );

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

@function list-remove($list, $index) {
	$newList: ();
	@for $i from 1 through length($list) {
		@if $i != $index {
			$newList: append($newList, nth($list,$i), 'space');
		}
	}
	@return $newList;
}

@mixin media( $args... ) {

	$media-queries : '';

	@each $arg in $args {

		$found : false;

		@each $name, $value in $breakpoints {

			@if str-index( $arg, $name ) and str-index( $arg, $name + '-' ) == null {

				$found : true;

				@if str-index( $arg, 'max' ) {
					$value : $value - 1px;
				}

				$breakpoint : str-replace( $arg, $name, $value );

				$media-queries : append( $media-queries, $breakpoint, $separator : comma );
			}
		}

		@if $found == false {
			$media-queries : append( $media-queries, $arg, $separator : comma );
		}

	}

	$media-queries : list-remove( $media-queries, 1 );

	$query-string : '';

	@each $media-query in $media-queries {
		$query-string : $query-string + ' and (' + $media-query + ')'
	}

	@media only screen#{$query-string} {
		@content;
	}
}

@mixin breakpoint( $width, $type: min ) {
    @if map_has_key( $breakpoints, $width)  {

        $width: map_get( $breakpoints, $width );

        @if $type == max {
            $width: $width + 1px;
        }

        @media only screen and ( #{$type}-width: $width ) {
            @content;
        }
    }

    @else {
    	@media only screen and ( #{$type}-width: $width ) {
    	    @content;
    	}
    }
}

@mixin minBreakpoint( $screen ) {
	@include breakpoint( $screen, 'min' );
}

@mixin maxBreakpoint( $screen ) {
	@include breakpoint( $screen, 'max' );
}

@mixin breakpoint2( $width, $type: min ) {
    @if map_has_key( $breakpoints, $width)  {

        $width: map_get( $breakpoints, $width );

        @if $type == min {
            $width: $width + 1px;
        }

        @media only screen and ( #{$type}-width: $width ) {
            @content;
        }
    }
}

@mixin box-style() {
	background-color: #fff;
	padding: $padding;
	margin-bottom: $spacing;
}

// retrieve breakpoint for min vs max declerations
@function breakpoints( $size ) {
  // map inception
  @return map-get($breakpoints, $size );
}

@mixin invisible() {
    clip: rect(0px, 0px, 0px, 0px);
    -webkit-clip-path: rect( 0px 0px, 0px 0px, 0px 0px, 0px 0px);
    clip-path: rect( 0px 0px, 0px 0px, 0px 0px, 0px 0px);
    position: absolute !important;
    height: 1px;
    width: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
    font-size: 0;
    overflow: hidden;
}

@function calculateRem( $size ) {
	$remSize: parseInt( $size ) / parseInt( 16 );
	@return #{$remSize}rem;
}

@function RmToPx( $size ) {
	$pxSize: $size *  parseInt( $base-font-size );
	@return #{$pxSize};
}

@function SizePlusPadding( $size, $pad ) {
	@return ( parseInt( $pad ) * $base-font-size ) + $size;
}

@mixin fontSize( $size ) {
	font-size: calculateRem( $size );
}

@mixin flexboxWidth( $size ) {
	min-width: ( parseInt( $gutter ) * $base-font-size ) + $size;
	max-width: ( parseInt( $gutter ) * $base-font-size ) + $size;
}

@function convertUnits( $value, $currentUnit, $convertUnit, $base:$base-font-size ){
	@if $currentUnit == 'rem' {
		@if $convertUnit == 'em' {
            $diff : 16 / parseInt( $base );
            @return parseInt( $value ) * $diff + 0em;
		}
		@else if $convertUnit == 'px' {
            @return parseInt( $value ) * 16 + 0px;
        }
        @else {
            @return $value;
        }
	}
	@else if $currentUnit == 'em' {
    	@if $convertUnit == 'rem' {
            $diff : parseInt( $base ) / 16;
            @return parseInt( $value ) * $diff + 0em;
		}
		@else if $convertUnit == 'px' {
            @return parseInt( $value ) * parseInt( $base ) + 0px;
        }
        @else {
            @return $value;
        }
	}
	@else if $currentUnit == 'px' {
		@if $convertUnit == 'em' {
            @return ( parseInt( $value ) / parseInt( $base ) ) + 0em;
		}
		@else if $convertUnit == 'rem' {
            @return ( parseInt( $value ) / 16 ) + 0rem;
        }
        @else {
            @return $value;
        }
    }
    @else {
        @return $value;
    }
}
